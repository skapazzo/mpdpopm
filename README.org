#+TITLE: README
#+DESCRIPTION: mpdpopm
#+AUTHOR: Michael Herstine
#+EMAIL: sp1ff@pobox.com
#+DATE: <2020-11-24 Tue 18:01>
#+AUTODATE: t

* Introduction

[[https://github.com/sp1ff/mpdpopm][mpdpopm]] provides a companion daemon to [[https://www.musicpd.org/][mpd]] for maintaining play counts, ratings and last-played timestamps, along with an associated CLI for talking to the daemon. Similar to [[https://github.com/vincent-petithory/mpdfav][mpdfav]], but written in Rust (which I prefer to Go), it will maintain this information in your sticker database. Along the lines of [[https://alip.github.io/mpdcron][mpdcron]], it will also allow you to keep that information up-to-date in your tags by invoking external (user-provided & -configured) commands.

* Prerequisites

  - [[https://www.musicpd.org/][Music Player Daemon]]: "Music Player Daemon (MPD) is a flexible, powerful, server-side application for playing music. Through plugins and libraries it can play a variety of sound files while being controlled by its network protocol."

If you choose to use the pre-built [[https://github.com/sp1ff/mpdpopm/releases][binaries]], that's all you'll need-- you can jump down to [[#getting_started][Getting Started]], below (see [[#installing][Installing]], below).

If you choose to download [[https://github.com/sp1ff/mpdpopm][mpdpopm]] from [[https://crates.io/crates/mpdpopm][crates.io]], you'll need:

  - [[https://www.rust-lang.org/tools/install][Rust]]: Rust is a memory- & thread-safe language with no runtime or garbage collector

If you would like to build from source, either from one of the source [[https://github.com/sp1ff/mpdpopm/releases][distributions]] or directly by cloning this repository, you'll also need the Gnu [[https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html][Autotools]] installed.

* Installing
  :PROPERTIES:
  :CUSTOM_ID: installing
  :END:

You can install [[https://github.com/sp1ff/mpdpopm][mpdpopm]] in a few different ways:

  1. due to a suggestion by [[https://github.com/m040601][m040601]], you can now download pre-built binaries for each [[https://github.com/sp1ff/mpdpopm/releases][release]]; only Linux & MacOS are supported, right now, and only on x86_64 at that
  2. you can download [[https://github.com/sp1ff/mpdpopm][mpdpopm]] from [[https://crates.io/crates/mpdpopm][crates.io]] (i.e. say =cargo install mpdpopm=)
  3. you can grab one of the source distributions under each [[https://github.com/sp1ff/mpdpopm/releases][release]]; in that case it's the usual =./configure && make && sudo make install= incantation
  4. if you clone the repo, make sure to run =./bootrap= before configuring

* Getting Started
  :PROPERTIES:
  :CUSTOM_ID: getting_started
  :END:

** Program Structure

[[https://github.com/sp1ff/mpdpopm][mpdpopm]] provides two programs:

  1. =mppopmd= is the companion daemon process
  2. =mppopm= is the associated command-line interface to the daemon

I still haven't provided a =systemd= service unit, so you'll have to run the daemon process manually (say =mppopmd --help= for the relevant options; you may want to run it in the foreground while you get it up & running). Once up, it will create an [[https://www.musicpd.org/][mpd]] channel for commands ("unwoundstack.com:commands" by default, but this is configurable) and begin monitoring [[https://www.musicpd.org/][mpd]] playback. Every time [[https://www.musicpd.org/][mpd]] plays a track, it will increment that track's playcount & last-played timestamp in the sticker database. If any [[https://www.musicpd.org/][mpd]] client sends the "rating" command to our channel, [[https://github.com/sp1ff/mpdpopm][mpdpopm]] will also update the corresponding sticker.

Of particular interest is the fact that the user can configure commands to be run when the playcount is updated or the rating is set. You might, for instance, use this feature to update the =PCNT= and/or =POPM= tags accordingly.

=mppopm= is a simple CLI that will let you get & set playcounts & ratings; say =mppopm --help= to see what it offers.

** Configuration

=mppopmd= takes an optional configuration file. I haven't documented it fully yet-- here is mine:

#+BEGIN_EXAMPLE
  ((log . "/home/mgh/var/log/mppopmd.log")
   (host . "192.168.1.6")
   (port . 6600)
   (local_music_dir . "/mnt/Took-Hall/mp3")
   (playcount_sticker . "unwoundstack.com:playcount")
   (lastplayed_sticker . "unwoundstack.com:lastplayed")
   (played_thresh . 0.6)
   (poll_interval_ms . 5000)
   (playcount_command . "/home/mgh/bin/scribbu")
   (playcount_command_args . ("popm" "-a" "-A" "-b" "-o" "sp1ff@pobox.com" "-C" "%playcount" "%full-file"))
   (commands_chan . "unwoundstack.com:commands")
   (rating_sticker . "unwoundstack.com:rating")
   (ratings_command . "/home/mgh/bin/scribbu")
   (ratings_command_args . ("popm" "-a" "-A" "-b" "-o" "sp1ff@pobox.com" "-r" "%rating" "%full-file")))
#+END_EXAMPLE

** Generalized Commands

The admin can also configure arbitrary commands to be run server-side in response to messages received on the mpdpopm command channel. As an example, an entry in the configuration file like this:

#+BEGIN_EXAMPLE
  (gen_cmds .
          (((name . "set-genre")
            (formal_parameters . (Literal Track))
            (default_after . 1)
            (cmd . "/home/mgh/bin/scribbu")
            (args . ("genre" "-a" "-C" "-g" "%1" "%full-file"))
            (update . TrackOnly)))
#+END_EXAMPLE

will define a new command "set-genre", with two parameters, the second of which can be omitted (it will default to the current track). When mpdpopm receives this command (i.e. when a client says something like:

#+BEGIN_EXAMPLE
  sendmessage unwoundstack.com:commands "set-genre Rock"
#+END_EXAMPLE

mpdpopm will invoke =/home/mgh/bin/scribbu= like this:

#+BEGIN_EXAMPLE
  /home/user/bin/mgh/scribbu genre -a -C -g Rock "${music-dir}/${song URI}"
#+END_EXAMPLE

* Status & Roadmap

I am currently using [[https://github.com/sp1ff/mpdpopm][mpdpopm]] day in & day out with my music collection, but it's early days. I have chosen the version number (0.1) in the hopes of indicating that. I'm considering adding another sticker for a tag cloud, and adding a filter feature that would extend the MPD "find" capability to allow queries that include the stickers that [[https://github.com/sp1ff/mpdpopm][mpdpopm]] manages-- so you could, for instance, say:

#+BEGIN_EXAMPLE
find (artist =~ foo) and (rating > 175)
#+END_EXAMPLE

MPD would handle the "artist =~" clause & [[https://github.com/sp1ff/mpdpopm][mpdpopm]] the "rating >" clause, as well as combining the results.

Windows support may be some time coming; the daemon depends on Unix signal handling, the MPD Unix socket, and the Unix daemon logic, especially =fork= & =exec=... if you'd like to run it on Windows, let me know-- if there's enough interest, and I can get some kind of Windows VM setup, I'll look at a port.

Suggestions, bug repors & PRs welcome!
